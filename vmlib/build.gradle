apply plugin: 'com.android.library'
//apply plugin: 'com.github.panpf.bintray-publish'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
//apply plugin: 'kotlin-android-extensions'
apply plugin: 'maven-publish'
apply plugin: 'signing'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    viewBinding {
        enabled true
    }
    dataBinding {
        enabled true
    }
    android {
        lintOptions {
            abortOnError false
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "androidx.appcompat:appcompat:${appcompatVersion}"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.3.1'
    implementation "androidx.fragment:fragment-ktx:1.3.6"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.3.1"
    annotationProcessor "android.arch.lifecycle:compiler:1.1.1"

    compileOnly "org.greenrobot:eventbus:3.1.1"
    compileOnly "org.simple:androideventbus:1.0.5.1"
    // 友盟统计SDK
    compileOnly  'com.umeng.umsdk:common:9.4.4'// 必选
    compileOnly  'com.umeng.umsdk:asms:1.4.1'// 必选
    compileOnly 'com.umeng.umsdk:apm:1.2.0'// 推荐，错误分析升级为U-APM产品，关注crash数据需集成
    compileOnly "com.github.Shouheng88:uix-core:${uixCoreVersion}"
    compileOnly "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.1"
    compileOnly "androidx.preference:preference-ktx:$preference_version"

    api "com.github.Shouheng88:utils-core:${utilsCoreVersion}"
    api "com.github.Shouheng88:utils-ktx:${utilsCoreVersion}"
    api "com.github.Shouheng88:compressor:1.6.0"
//    api "com.github.Shouheng88:vmlib-network:$publishVersion"
    api project(":vmlib_network")
}

//publish {
//    userOrg = 'easymark'
//    groupId = 'me.shouheng.vmlib'
//    artifactId = 'vmlib-core'
//    repoName = 'Android'
//    publishVersion = rootProject.ext.publishVersion
//    desc = 'The mvvm architecture for Android.'
//    website = 'https://github.com/Shouheng88/MVVMs'
//}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.source

    exclude "**/R.class"
    exclude "**/BuildConfig.class"
}

publishing {
    // 定义发布什么
    publications {
        mavenJava(MavenPublication) {
            groupId 'com.github.Shouheng88'
            artifactId 'vmlib'
            version rootProject.ext.publishVersion
            // Two artifacts, the `aar` and the sources
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact androidSourcesJar
            pom {
                // 构件名称，区别于 artifactId，可以理解为 artifactName
                name = 'VMLib'
                // 构件描述
                description = 'Android VMLib'
                // 构件主页
                url = 'https://github.com/Shouheng88/Android-VMLib'
                // 许可证名称和地址
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                // 开发者信息
                developers {
                    developer {
                        name = 'ShouHeng'
                        email = 'shouheng2020@gmail.com'
                    }
                }
                // 版本控制仓库地址
                scm {
                    url = 'https://github.com/Shouheng88/Android-VMLib'
                    connection = 'scm:git:github.com/Shouheng88/Android-VMLib.git'
                    developerConnection = 'scm:git:ssh://git@github.com:Shouheng88/Android-VMLib.git'
                }
                // A slightly hacky fix so that your POM will include any transitive dependencies
                // that your library builds upon
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    project.configurations.all { configuration ->
                        def name = configuration.name
                        if (name != "implementation" && name != "compile" && name != "api") {
                            return
                        }
                        println(configuration)
                        configuration.dependencies.each {
                            println(it)
                            if (it.name == "unspecified") {
                                // 忽略无法识别的
                                return
                            }
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            if (name == "api" || name == "compile") {
                                dependencyNode.appendNode("scope", "compile")
                            } else { // implementation
                                dependencyNode.appendNode("scope", "runtime")
                            }
                        }
                    }
                }
            }
        }
    }
    // 定义发布到哪里
    repositories {
        maven {
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            // You only need this if you want to publish snapshots, otherwise just set the URL
            // to the release repo directly
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                // 这里就是之前在 issues.sonatype.org 注册的账号
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications
}
